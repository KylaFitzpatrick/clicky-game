{"version":3,"sources":["components/AnimalCard/index.js","components/Wrapper/index.js","components/Nav/index.js","components/Hero/index.js","components/Footer/index.js","App.js","index.js"],"names":["AnimalCard","props","className","alt","name","src","image","id","onClick","shuffleAnimalCard","Wrapper","children","Score","msg","score","topScore","Hero","class","Footer","App","state","animals","chosenAnimalIds","includes","setState","push","length","console","log","newAnimals","sort","a","b","Math","random","Nav","this","map","animal","key","Component","ReactDOM","render","document","getElementById"],"mappings":"ktEAWeA,MARf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,QACX,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,GAAIN,EAAMM,GAAIC,QAAS,kBAAMP,EAAMQ,kBAAkBR,EAAMM,S,MCC5FG,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,MCkB1BC,MAhBf,SAAeX,GACb,OACE,oCACE,6BACE,yBAAKC,UAAU,eACb,wBAAIA,UAAU,OACZ,wBAAIA,UAAU,UAAd,eACA,wBAAIK,GAAG,MAAML,UAAU,UAAUD,EAAMY,KACvC,wBAAIN,GAAG,QAAQL,UAAU,UAAzB,UAA0CD,EAAMa,MAAhD,eAAmEb,EAAMc,e,MCAtEC,MAXf,SAAcf,GACZ,OACE,yBAAKgB,MAAM,sBACP,2CACA,mFACJ,yBAAKA,MAAM,YAAW,yBAAKd,IAAKF,EAAMG,KAAMC,IAAI,uH,MCMrCa,MAXf,SAAgBjB,GACd,OACA,4BAAQC,UAAU,eACV,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,aAAf,sC,OC2EGiB,E,4MAxEbC,MAAQ,CACNN,MAAO,EACPC,SAAU,EACVF,IAAK,kBACLQ,UACAC,gBAAiB,I,EASnBb,kBAAoB,SAACF,GAEnB,IAAIe,EAAkB,EAAKF,MAAME,gBACjC,GAAIA,EAAgBC,SAAShB,GAC3B,EAAKiB,SAAS,CAAEF,gBAAiB,GAAIR,MAAO,EAAGD,IAAK,mBADtD,CAIES,EAAgBG,KAAKlB,GAErB,IAAIQ,EAAW,EAAKK,MAAML,SACtBD,EAAQ,EAAKM,MAAMN,MAKvB,GAHIQ,EAAgBC,SAAShB,IAAOQ,IAAaD,GAC/C,EAAKU,SAAS,CAAET,SAAUA,EAAW,EAAGD,MAAOA,EAAQ,IAE1B,KAA3BQ,EAAgBI,OAGlB,OAFA,EAAKF,SAAS,CAAEV,MAAO,GAAID,IAAK,WAAYS,gBAAiB,UAC7DK,QAAQC,IAAI,UAGd,IAAIC,EAAaR,EAAQS,MAAK,SAACC,EAAEC,GAAH,OAAOC,KAAKC,SAAS,MACnD,EAAKV,SAAS,CAAEH,QAAQQ,EAAYP,kBAAiBR,MAAOA,EAAQ,EAAGD,IAAK,e,uDAOtE,IAAD,OACP,OACE,6BAEE,kBAACsB,EAAD,CACErB,MAAOsB,KAAKhB,MAAMN,MAClBC,SAAUqB,KAAKhB,MAAML,SACrBF,IAAKuB,KAAKhB,MAAMP,MAGlB,kBAAC,EAAD,MAEA,kBAAC,EAAD,KACGuB,KAAKhB,MAAMC,QAAQgB,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACE7B,kBAAmB,EAAKA,kBACxBF,GAAI+B,EAAO/B,GACXgC,IAAKD,EAAO/B,GACZD,MAAOgC,EAAOhC,MACdH,IAAKmC,EAAOlC,WAIlB,kBAAC,EAAD,W,GAnEUoC,a,MCHlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c1cc282d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction AnimalCard(props) {\n  return (\n    <div className=\"card\">\n        <img alt={props.name} src={props.image} id={props.id} onClick={() => props.shuffleAnimalCard(props.id)}/>\n    </div>\n  );\n}\n\nexport default AnimalCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\n// If we want a child component to update or pass data to its parent, we can create a method inside the parent for the update\n// Then bind the method to the parent, and pass it to the child as a prop\n\nfunction Score(props) {\n  return (\n    <>\n      <nav>\n        <div className=\"nav-wrapper\">\n          <ul className=\"row\">\n            <li className=\"col s4\">Clicky Game</li>\n            <li id=\"msg\" className=\"col s4\">{props.msg}</li>\n            <li id=\"score\" className=\"col s4\">Score: {props.score} Top Score: {props.topScore}</li>\n          </ul>\n        </div>\n      </nav>\n    </>\n  );\n}\n\nexport default Score;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Hero(props) {\n  return (\n    <div class=\"parallax-container\">\n        <h1>Clicky Game</h1>\n        <h2>Click an image to test your memory and earn points!</h2>\n    <div class=\"parallax\"><img alt={props.name} src=\"https://images.pexels.com/photos/2521619/pexels-photo-2521619.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=500&w=1010\"></img></div>\n  </div>\n   \n  );\n}\n\nexport default Hero;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer(props) {\n  return (\n  <footer className=\"page-footer\">\n          <div className=\"footer-copyright\">\n            <div className=\"container\">\n              Â© 2020 Copyright Clicky Game\n            </div>\n          </div>\n        </footer>\n  )\n}\nexport default Footer;","import React, { Component } from \"react\";\nimport AnimalCard from \"./components/AnimalCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Nav from \"./components/Nav\";\nimport Hero from \"./components/Hero\";\nimport Footer from \"./components/Footer\";\nimport animals from \"./animals.json\";\n\nclass App extends Component {\n  // Setting this.state.animals to the animals json array\n  state = {\n    score: 0,\n    topScore: 0,\n    msg: \"Click an image!\",\n    animals,\n    chosenAnimalIds: []\n  };\n\n  //shuffle the cards after click\n  //if card clicked then shuffle cards\n  //update score and total score\n  //if user clicks card not already choosen increase score and top score\n  //if user clicks card already choosen restart game and clear score and if score \n  //is greater than top score replace top score\n  shuffleAnimalCard = (id) => {\n    // Filter this.state.animals for animals with an id equal to the id then suffle\n    let chosenAnimalIds = this.state.chosenAnimalIds\n    if (chosenAnimalIds.includes(id)) {\n      this.setState({ chosenAnimalIds: [], score: 0, msg: \"Incorrect!\" });\n      return;\n    } else {\n      chosenAnimalIds.push(id)\n      //top score is less than score display dont display score if top score if greater than score display topscore\n      let topScore = this.state.topScore\n      let score = this.state.score\n\n      if (chosenAnimalIds.includes(id) && topScore === score) {\n        this.setState({ topScore: topScore + 1, score: score + 1 })\n      }\n      if (chosenAnimalIds.length === 12) {\n        this.setState({ score: 12, msg: \"You win!\", chosenAnimalIds: [] });\n        console.log('Winner');\n        return;\n      }\n      let newAnimals = animals.sort((a,b)=>Math.random()-0.5)\n      this.setState({ animals:newAnimals, chosenAnimalIds, score: score + 1, msg: \"Correct!\" });\n\n\n    }; \n  }\n\n  // Map over this.state.animals and render a AnimalCard component for each animal object\n  render() {\n    return (\n      <div>\n\n        <Nav\n          score={this.state.score}\n          topScore={this.state.topScore}\n          msg={this.state.msg}\n        />\n        \n        <Hero />\n       \n        <Wrapper>\n          {this.state.animals.map(animal => (\n            <AnimalCard\n              shuffleAnimalCard={this.shuffleAnimalCard}\n              id={animal.id}\n              key={animal.id}\n              image={animal.image}\n              alt={animal.name}\n            />\n          ))}\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}