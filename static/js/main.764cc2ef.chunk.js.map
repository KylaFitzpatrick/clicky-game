{"version":3,"sources":["components/AnimalCard/index.js","components/Wrapper/index.js","components/Score/index.js","App.js","index.js"],"names":["AnimalCard","props","className","alt","name","src","image","id","onClick","shuffleAnimalCard","Wrapper","children","Score","msg","score","topScore","App","state","animals","chosenAnimalIds","includes","setState","push","length","console","log","newAnimals","sort","a","b","Math","random","this","map","animal","key","Component","ReactDOM","render","document","getElementById"],"mappings":"8qEAWeA,MARf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,QACX,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,GAAIN,EAAMM,GAAIC,QAAS,kBAAMP,EAAMQ,kBAAkBR,EAAMM,S,MCC5FG,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,MCkB1BC,MAhBf,SAAeX,GACb,OACE,oCACE,6BACE,yBAAKC,UAAU,eACb,wBAAIA,UAAU,OACZ,wBAAIA,UAAU,UAAd,eACA,wBAAIK,GAAG,MAAML,UAAU,UAAUD,EAAMY,KACvC,wBAAIN,GAAG,QAAQL,UAAU,UAAzB,UAA0CD,EAAMa,MAAhD,eAAmEb,EAAMc,e,OCuEtEC,E,4MA7EbC,MAAQ,CACNH,MAAO,EACPC,SAAU,EACVF,IAAK,kBACLK,UACAC,gBAAiB,I,EASnBV,kBAAoB,SAACF,GAEnB,IAAIY,EAAkB,EAAKF,MAAME,gBACjC,GAAIA,EAAgBC,SAASb,GAC3B,EAAKc,SAAS,CAAEF,gBAAiB,GAAIL,MAAO,EAAGD,IAAK,iCADtD,CAIEM,EAAgBG,KAAKf,GAErB,IAAIQ,EAAW,EAAKE,MAAMF,SACtBD,EAAQ,EAAKG,MAAMH,MAKvB,GAHIK,EAAgBC,SAASb,IAAOQ,IAAaD,GAC/C,EAAKO,SAAS,CAAEN,SAAUA,EAAW,EAAGD,MAAOA,EAAQ,IAE1B,KAA3BK,EAAgBI,OAGlB,OAFA,EAAKF,SAAS,CAAEP,MAAO,GAAID,IAAK,WAAYM,gBAAiB,UAC7DK,QAAQC,IAAI,UAGd,IAAIC,EAAaR,EAAQS,MAAK,SAACC,EAAEC,GAAH,OAAOC,KAAKC,SAAS,MACnD,EAAKV,SAAS,CAAEH,QAAQQ,EAAYP,kBAAiBL,MAAOA,EAAQ,EAAGD,IAAK,6B,uDAOtE,IAAD,OACP,OACE,6BAEE,kBAAC,EAAD,CACEC,MAAOkB,KAAKf,MAAMH,MAClBC,SAAUiB,KAAKf,MAAMF,SACrBF,IAAKmB,KAAKf,MAAMJ,MAGlB,kBAAC,EAAD,KACGmB,KAAKf,MAAMC,QAAQe,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACEzB,kBAAmB,EAAKA,kBACxBF,GAAI2B,EAAO3B,GACX4B,IAAKD,EAAO3B,GACZD,MAAO4B,EAAO5B,MACdH,IAAK+B,EAAO9B,WAKlB,4BAAQF,UAAU,eAChB,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,aAAf,0C,GApEMkC,a,MCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.764cc2ef.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction AnimalCard(props) {\n  return (\n    <div className=\"card\">\n        <img alt={props.name} src={props.image} id={props.id} onClick={() => props.shuffleAnimalCard(props.id)}/>\n    </div>\n  );\n}\n\nexport default AnimalCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\n// If we want a child component to update or pass data to its parent, we can create a method inside the parent for the update\n// Then bind the method to the parent, and pass it to the child as a prop\n\nfunction Score(props) {\n  return (\n    <>\n      <nav>\n        <div className=\"nav-wrapper\">\n          <ul className=\"row\">\n            <li className=\"col s4\">Clicky Game</li>\n            <li id=\"msg\" className=\"col s4\">{props.msg}</li>\n            <li id=\"score\" className=\"col s4\">Score: {props.score} Top Score: {props.topScore}</li>\n          </ul>\n        </div>\n      </nav>\n    </>\n  );\n}\n\nexport default Score;\n","import React, { Component } from \"react\";\nimport AnimalCard from \"./components/AnimalCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport animals from \"./animals.json\";\n\nclass App extends Component {\n  // Setting this.state.animals to the animals json array\n  state = {\n    score: 0,\n    topScore: 0,\n    msg: \"Click an image!\",\n    animals,\n    chosenAnimalIds: []\n  };\n\n  //shuffle the cards after click\n  //if card clicked then shuffle cards\n  //update score and total score\n  //if user clicks card not already choosen increase score and top score\n  //if user clicks card already choosen restart game and clear score and if score \n  //is greater than top score replace top score\n  shuffleAnimalCard = (id) => {\n    // Filter this.state.animals for animals with an id equal to the id then suffle\n    let chosenAnimalIds = this.state.chosenAnimalIds\n    if (chosenAnimalIds.includes(id)) {\n      this.setState({ chosenAnimalIds: [], score: 0, msg: \"You guessed incorrectly!\" });\n      return;\n    } else {\n      chosenAnimalIds.push(id)\n      //top score is less than score display dont display score if top score if greater than score display topscore\n      let topScore = this.state.topScore\n      let score = this.state.score\n\n      if (chosenAnimalIds.includes(id) && topScore === score) {\n        this.setState({ topScore: topScore + 1, score: score + 1 })\n      }\n      if (chosenAnimalIds.length === 12) {\n        this.setState({ score: 12, msg: \"You win!\", chosenAnimalIds: [] });\n        console.log('Winner');\n        return;\n      }\n      let newAnimals = animals.sort((a,b)=>Math.random()-0.5)\n      this.setState({ animals:newAnimals, chosenAnimalIds, score: score + 1, msg: \"You guessed correctly!\" });\n\n\n    };\n  }\n\n  // Map over this.state.animals and render a AnimalCard component for each animal object\n  render() {\n    return (\n      <div >\n\n        <Score\n          score={this.state.score}\n          topScore={this.state.topScore}\n          msg={this.state.msg}\n        />\n\n        <Wrapper>\n          {this.state.animals.map(animal => (\n            <AnimalCard\n              shuffleAnimalCard={this.shuffleAnimalCard}\n              id={animal.id}\n              key={animal.id}\n              image={animal.image}\n              alt={animal.name}\n            />\n          ))}\n        </Wrapper>\n        \n        <footer className=\"page-footer\">\n          <div className=\"footer-copyright\">\n            <div className=\"container\">\n              Â© 2020 Copyright Clicky Game\n            </div>\n          </div>\n        </footer>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}